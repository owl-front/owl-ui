/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ShapeType, Size, Type } from "./enums/button";
export { ShapeType, Size, Type } from "./enums/button";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface OwlButton {
        /**
          * 将按钮宽度调整为其父宽度的选项
         */
        "block": boolean;
        /**
          * 根部样式
         */
        "classNames": string;
        /**
          * 危险按钮
         */
        "danger": boolean;
        /**
          * 设置按钮失效状态
         */
        "disabled": boolean;
        /**
          * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
         */
        "href": string;
        /**
          * 设置 button 原生的 type 值
         */
        "htmlType": string;
        /**
          * 设置按钮载入状态
         */
        "loading": boolean;
        /**
          * 设置按钮形状
         */
        "shape": ShapeType;
        /**
          * 设置按钮大小
         */
        "size": Size;
        /**
          * 设置按钮style
         */
        "styles": object | null;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "target": string;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "type": Type;
    }
    interface OwlIcon {
    }
}
export interface OwlButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOwlButtonElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOwlButtonElement extends Components.OwlButton, HTMLStencilElement {
    }
    var HTMLOwlButtonElement: {
        prototype: HTMLOwlButtonElement;
        new (): HTMLOwlButtonElement;
    };
    interface HTMLOwlIconElement extends Components.OwlIcon, HTMLStencilElement {
    }
    var HTMLOwlIconElement: {
        prototype: HTMLOwlIconElement;
        new (): HTMLOwlIconElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "owl-button": HTMLOwlButtonElement;
        "owl-icon": HTMLOwlIconElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface OwlButton {
        /**
          * 将按钮宽度调整为其父宽度的选项
         */
        "block"?: boolean;
        /**
          * 根部样式
         */
        "classNames"?: string;
        /**
          * 危险按钮
         */
        "danger"?: boolean;
        /**
          * 设置按钮失效状态
         */
        "disabled"?: boolean;
        /**
          * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
         */
        "href"?: string;
        /**
          * 设置 button 原生的 type 值
         */
        "htmlType"?: string;
        /**
          * 设置按钮载入状态
         */
        "loading"?: boolean;
        /**
          * 点击事件
         */
        "onHandleClick"?: (event: OwlButtonCustomEvent<void>) => void;
        /**
          * 设置按钮形状
         */
        "shape"?: ShapeType;
        /**
          * 设置按钮大小
         */
        "size"?: Size;
        /**
          * 设置按钮style
         */
        "styles"?: object | null;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "target"?: string;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "type"?: Type;
    }
    interface OwlIcon {
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "owl-button": OwlButton;
        "owl-icon": OwlIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "owl-button": LocalJSX.OwlButton & JSXBase.HTMLAttributes<HTMLOwlButtonElement>;
            "owl-icon": LocalJSX.OwlIcon & JSXBase.HTMLAttributes<HTMLOwlIconElement>;
        }
    }
}
